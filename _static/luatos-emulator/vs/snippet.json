{"_G": {"body": "_G(${0:...})", "description": "_G", "prefix": "_G"}, "_VERSION": {"body": "_VERSION(${0:...})", "description": "_VERSION", "prefix": "_VERSION"}, "assert": {"body": "assert(${1:v}${2:[, message]})", "description": "assert()", "prefix": "assert"}, "collectgarbage": {"body": "collectgarbage(${1:[opt]}${2:[, arg]})", "description": "collectgarbage()", "prefix": "collectgarbage"}, "coroutine.create": {"body": "coroutine.create( ${1:function} )", "description": "coroutine.create", "prefix": "coroutine.create"}, "coroutine.isyieldable": {"body": "coroutine.isyieldable( )", "description": "coroutine.isyieldable", "prefix": "coroutine.isyieldable"}, "coroutine.resume": {"body": "coroutine.resume( ${1:co}${2:[, val1, \u00b7\u00b7\u00b7]} )", "description": "coroutine.resume", "prefix": "coroutine.resume"}, "coroutine.running": {"body": "coroutine.running( )", "description": "coroutine.running", "prefix": "coroutine.running"}, "coroutine.status": {"body": "coroutine.status( ${1:co} )", "description": "coroutine.status", "prefix": "coroutine.status"}, "coroutine.wrap": {"body": "coroutine.wrap( ${1:function} )", "description": "coroutine.wrap", "prefix": "coroutine.wrap"}, "coroutine.yield": {"body": "coroutine.yield( ${1:...} )", "description": "coroutine.yield", "prefix": "coroutine.yield"}, "debug.debug": {"body": "debug.debug()", "description": "debug.debug ()", "prefix": "debug.debug"}, "debug.getfenv": {"body": "debug.getfenv(${0:...})", "description": "debug.getfenv (o)", "prefix": "debug.getfenv"}, "debug.gethook": {"body": "debug.gethook( ${1:[thread]} )", "description": "debug.gethook ([thread])", "prefix": "debug.gethook"}, "debug.getinfo": {"body": "debug.getinfo( ${1:[thread],}${2:f}${3:[, what]} )", "description": "debug.getinfo ([thread,] f [, what])", "prefix": "debug.getinfo"}, "debug.getlocal": {"body": "debug.getlocal( ${1:[thread],}${2:f}${3:[, local]} )", "description": "debug.getlocal ([thread,] f, local)", "prefix": "debug.getlocal"}, "debug.getmetatable": {"body": "debug.getmetatable( ${1:value} )", "description": "debug.getmetatable (value)", "prefix": "debug.getmetatable"}, "debug.getregistry": {"body": "debug.getregistry()", "description": "debug.getregistry ()", "prefix": "debug.getregistry"}, "debug.getupvalue": {"body": "debug.getupvalue( ${1:f}, ${2:up} )", "description": "debug.getupvalue (f, up)", "prefix": "debug.getupvalue"}, "debug.getuservalue": {"body": "debug.getuservalue(${0:...})", "description": "debug.getuservalue (u)", "prefix": "debug.getuservalue"}, "debug.getuservalue ": {"body": "debug.getuservalue ( ${1:u} )", "description": "debug.getuservalue (u)", "prefix": "debug.getuservalue "}, "debug.setfenv": {"body": "debug.setfenv(${0:...})", "description": "debug.setfenv (object, table)", "prefix": "debug.setfenv"}, "debug.sethook": {"body": "debug.sethook( ${1:[thead,]}${2:hook}, ${3:mask}${4:[, count]} )", "description": "debug.sethook ([thread,] hook, mask [, count])", "prefix": "debug.sethook"}, "debug.setlocal": {"body": "debug.setlocal( ${1:[thead,]}${2:level}, ${3:local}, ${4:value} )", "description": "debug.setlocal ([thread,] level, local, value)", "prefix": "debug.setlocal"}, "debug.setmetatable": {"body": "debug.setmetatable( ${1:value}, ${2:table} )", "description": "debug.setmetatable (value, table)", "prefix": "debug.setmetatable"}, "debug.setupvalue": {"body": "debug.setupvalue( ${1:f}, ${2:up}, ${3:value} )", "description": "debug.setupvalue (f, up, value)", "prefix": "debug.setupvalue"}, "debug.setuservalue": {"body": "debug.setuservalue( ${1:udata}, ${2:value} )", "description": "debug.setuservalue (udata, value)", "prefix": "debug.setuservalue"}, "debug.traceback": {"body": "debug.traceback( ${1:[thread,]}${2:[message]}${3:[, level]} )", "description": "debug.traceback ([thread,] [message [, level]])", "prefix": "debug.traceback"}, "debug.upvalueid": {"body": "debug.upvalueid( ${1:f}, ${2:n})", "description": "debug.upvalueid (f, n)", "prefix": "debug.upvalueid"}, "debug.upvaluejoin": {"body": "debug.upvaluejoin( ${1:f1}, ${2:n1}, ${3:f2}, ${4:n2} )", "description": "debug.upvaluejoin (f1, n1, f2, n2)", "prefix": "debug.upvaluejoin"}, "dofile": {"body": "dofile(${1:[filename]})", "description": "dofile ([filename])", "prefix": "dofile"}, "elif": {"body": "else if ${1:condition} then\n\t${0:-- body}\n", "description": "elif", "prefix": "elif"}, "error": {"body": "error(${0:...})", "description": "error (message [, level])", "prefix": "error"}, "file:close": {"body": "file:close(${0:...})", "description": "file:close ()", "prefix": "file:close"}, "file:flush": {"body": "file:flush(${0:...})", "description": "file:flush ()", "prefix": "file:flush"}, "file:lines": {"body": "file:lines(${0:...})", "description": "file:lines ()", "prefix": "file:lines"}, "file:read": {"body": "file:read(${0:...})", "description": "file:read (...)", "prefix": "file:read"}, "file:seek": {"body": "file:seek(${0:...})", "description": "file:seek ([whence] [, offset])", "prefix": "file:seek"}, "file:setvbuf": {"body": "file:setvbuf(${0:...})", "description": "file:setvbuf (mode [, size])", "prefix": "file:setvbuf"}, "file:write": {"body": "file:write(${0:...})", "description": "file:write (...)", "prefix": "file:write"}, "for": {"body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend", "description": "for i=1,10", "prefix": "for"}, "fori": {"body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend", "description": "for i,v in ipairs()", "prefix": "fori"}, "forp": {"body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend", "description": "for k,v in pairs()", "prefix": "forp"}, "fun": {"body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend", "description": "function", "prefix": "fun"}, "function": {"body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend", "description": "function", "prefix": "function"}, "getfenv": {"body": "getfenv(${0:...})", "description": "getfenv ([f])", "prefix": "getfenv"}, "getmetatable": {"body": "getmetatable(${1:object})", "description": "getmetatable (object)", "prefix": "getmetatable"}, "if": {"body": "if ${1:condition} then\n\t${0:-- body}\nend", "description": "if", "prefix": "if"}, "ifel": {"body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend", "description": "ifel", "prefix": "ifel"}, "io.close": {"body": "io.close(${0:...})", "description": "io.close ([file])", "prefix": "io.close"}, "io.flush": {"body": "io.flush(${0:...})", "description": "io.flush ()", "prefix": "io.flush"}, "io.input": {"body": "io.input(${0:...})", "description": "io.input ([file])", "prefix": "io.input"}, "io.lines": {"body": "io.lines(${0:...})", "description": "io.lines ([filename])", "prefix": "io.lines"}, "io.open": {"body": "io.open(${0:...})", "description": "io.open (filename [, mode])", "prefix": "io.open"}, "io.output": {"body": "io.output(${0:...})", "description": "io.output ([file])", "prefix": "io.output"}, "io.popen": {"body": "io.popen(${0:...})", "description": "io.popen (prog [, mode])", "prefix": "io.popen"}, "io.read": {"body": "io.read(${0:...})", "description": "io.read (...)", "prefix": "io.read"}, "io.tmpfile": {"body": "io.tmpfile(${0:...})", "description": "io.tmpfile ()", "prefix": "io.tmpfile"}, "io.type": {"body": "io.type(${0:...})", "description": "io.type (obj)", "prefix": "io.type"}, "io.write": {"body": "io.write(${0:...})", "description": "io.write (...)", "prefix": "io.write"}, "ipairs": {"body": "ipairs(${0:...})", "description": "ipairs (t)", "prefix": "ipairs"}, "load": {"body": "load(${0:...})", "description": "load (func [, chunkname])", "prefix": "load"}, "loadfile": {"body": "loadfile(${0:...})", "description": "loadfile ([filename])", "prefix": "loadfile"}, "loadstring": {"body": "loadstring(${0:...})", "description": "loadstring (string [, chunkname])", "prefix": "loadstring"}, "local": {"body": "local ${1:x} = ${0:1}", "description": "local x = 1", "prefix": "local"}, "math.abs": {"body": "math.abs( ${1:x} )", "description": "math.abs", "prefix": "math.abs"}, "math.acos": {"body": "math.acos( ${1:x} )", "description": "math.acos", "prefix": "math.acos"}, "math.asin": {"body": "math.asin( ${1:x} )", "description": "math.asin", "prefix": "math.asin"}, "math.atan": {"body": "math.atan( ${1:y}${2:[, x]} )", "description": "math.atan", "prefix": "math.atan"}, "math.atan2": {"body": "math.atan2(${0:...})", "description": "math.atan2 (y, x)", "prefix": "math.atan2"}, "math.ceil": {"body": "math.ceil( ${1:x} )", "description": "math.ceil", "prefix": "math.ceil"}, "math.cos": {"body": "math.cos( ${1:x} )", "description": "math.cos", "prefix": "math.cos"}, "math.cosh": {"body": "math.cosh(${0:...})", "description": "math.cosh (x)", "prefix": "math.cosh"}, "math.deg": {"body": "math.deg( ${1:x} )", "description": "math.deg", "prefix": "math.deg"}, "math.exp": {"body": "math.exp( ${1:x} )", "description": "math.exp", "prefix": "math.exp"}, "math.floor": {"body": "math.floor( ${1:x} )", "description": "math.floor", "prefix": "math.floor"}, "math.fmod": {"body": "math.fmod( ${1:x},${2:y} )", "description": "math.fmod", "prefix": "math.fmod"}, "math.frexp": {"body": "math.frexp(${0:...})", "description": "math.frexp (x)", "prefix": "math.frexp"}, "math.huge": {"body": "math.huge(${0:...})", "description": "math.huge", "prefix": "math.huge"}, "math.ldexp": {"body": "math.ldexp(${0:...})", "description": "math.ldexp (m, e)", "prefix": "math.ldexp"}, "math.log": {"body": "math.log( ${1:x}${2:[, base]} )", "description": "math.log", "prefix": "math.log"}, "math.log10": {"body": "math.log10(${0:...})", "description": "math.log10 (x)", "prefix": "math.log10"}, "math.math.randomseed": {"body": "math.math.randomseed( ${1:x} )", "description": "math.math.randomseed", "prefix": "math.math.randomseed"}, "math.max": {"body": "math.max( ${1:x},${2:...} )", "description": "math.max", "prefix": "math.max"}, "math.maxinteger": {"body": "math.maxinteger(${0:...})", "description": "math.maxinteger", "prefix": "math.maxinteger"}, "math.min": {"body": "math.min( ${1:x},${2:...} )", "description": "math.min", "prefix": "math.min"}, "math.mininteger": {"body": "math.mininteger(${0:...})", "description": "math.mininteger", "prefix": "math.mininteger"}, "math.modf": {"body": "math.modf( ${1:x} )", "description": "math.modf", "prefix": "math.modf"}, "math.pi": {"body": "math.pi(${0:...})", "description": "math.pi", "prefix": "math.pi"}, "math.pow": {"body": "math.pow(${0:...})", "description": "math.pow (x, y)", "prefix": "math.pow"}, "math.rad": {"body": "math.rad(${0:...})", "description": "math.rad (x)", "prefix": "math.rad"}, "math.random": {"body": "math.random( ${1:[m]}${2:[, n]} )", "description": "math.random", "prefix": "math.random"}, "math.randomseed": {"body": "math.randomseed(${0:...})", "description": "math.randomseed (x)", "prefix": "math.randomseed"}, "math.sin": {"body": "math.sin( ${1:x} )", "description": "math.sin", "prefix": "math.sin"}, "math.sinh": {"body": "math.sinh(${0:...})", "description": "math.sinh (x)", "prefix": "math.sinh"}, "math.sqrt": {"body": "math.sqrt( ${1:x} )", "description": "math.sqrt", "prefix": "math.sqrt"}, "math.tan": {"body": "math.tan( ${1:x} )", "description": "math.tan", "prefix": "math.tan"}, "math.tanh": {"body": "math.tanh(${0:...})", "description": "math.tanh (x)", "prefix": "math.tanh"}, "math.tointeger": {"body": "math.tointeger( ${1:x} )", "description": "math.tointeger", "prefix": "math.tointeger"}, "math.type": {"body": "math.type( ${1:x} )", "description": "math.type", "prefix": "math.type"}, "math.ult": {"body": "math.ult(${0:...})", "description": "math.ult (m, n)", "prefix": "math.ult"}, "module": {"body": "module(${0:...})", "description": "module (name [, ...])", "prefix": "module"}, "next": {"body": "next(${1:table}${2:[, index]})", "description": "next (table [, index])", "prefix": "next"}, "os.clock": {"body": "os.clock(${0:...})", "description": "os.clock ()", "prefix": "os.clock"}, "os.date": {"body": "os.date(${0:...})", "description": "os.date ([format [, time]])", "prefix": "os.date"}, "os.difftime": {"body": "os.difftime(${0:...})", "description": "os.difftime (t2, t1)", "prefix": "os.difftime"}, "os.execute": {"body": "os.execute(${0:...})", "description": "os.execute ([command])", "prefix": "os.execute"}, "os.exit": {"body": "os.exit(${0:...})", "description": "os.exit ([code])", "prefix": "os.exit"}, "os.getenv": {"body": "os.getenv(${0:...})", "description": "os.getenv (varname)", "prefix": "os.getenv"}, "os.remove": {"body": "os.remove(${0:...})", "description": "os.remove (filename)", "prefix": "os.remove"}, "os.rename": {"body": "os.rename(${0:...})", "description": "os.rename (oldname, newname)", "prefix": "os.rename"}, "os.setlocale": {"body": "os.setlocale(${0:...})", "description": "os.setlocale (locale [, category])", "prefix": "os.setlocale"}, "os.time": {"body": "os.time(${0:...})", "description": "os.time ([table])", "prefix": "os.time"}, "os.tmpname": {"body": "os.tmpname(${0:...})", "description": "os.tmpname ()", "prefix": "os.tmpname"}, "package.config": {"body": "package.config(${0:...})", "description": "package.config", "prefix": "package.config"}, "package.cpath": {"body": "package.cpath(${0:...})", "description": "package.cpath", "prefix": "package.cpath"}, "package.loaded": {"body": "package.loaded(${0:...})", "description": "package.loaded", "prefix": "package.loaded"}, "package.loaders": {"body": "package.loaders(${0:...})", "description": "package.loaders", "prefix": "package.loaders"}, "package.loadlib": {"body": "package.loadlib(${0:...})", "description": "package.loadlib (libname, funcname)", "prefix": "package.loadlib"}, "package.path": {"body": "package.path(${0:...})", "description": "package.path", "prefix": "package.path"}, "package.preload": {"body": "package.preload(${0:...})", "description": "package.preload", "prefix": "package.preload"}, "package.searchers": {"body": "package.searchers(${0:...})", "description": "package.searchers", "prefix": "package.searchers"}, "package.searchpath": {"body": "package.searchpath(${0:...})", "description": "package.searchpath (name, path [, sep [, rep]])", "prefix": "package.searchpath"}, "package.seeall": {"body": "package.seeall(${0:...})", "description": "package.seeall (module)", "prefix": "package.seeall"}, "pairs": {"body": "pairs(${0:...})", "description": "pairs (t)", "prefix": "pairs"}, "pcall": {"body": "pcall(${0:...})", "description": "pcall (f, arg1, ...)", "prefix": "pcall"}, "print": {"body": "print(${1:...})", "description": "print(...)", "prefix": "print"}, "require": {"body": "require\"${1:module}\"", "description": "require()", "prefix": "require"}, "ret": {"body": "return ${1:...}", "description": "return ...", "prefix": "ret"}, "select": {"body": "select(${1:index}, ${2:...})", "description": "select (index, \u00b7\u00b7\u00b7)", "prefix": "select"}, "setfenv": {"body": "setfenv(${0:...})", "description": "setfenv (f, table)", "prefix": "setfenv"}, "setmetatable": {"body": "setmetatable(${1:table}, ${2:metatable})", "description": "setmetatable (table, metatable)", "prefix": "setmetatable"}, "tonumber": {"body": "tonumber(${1:e}${2:[, base]})", "description": "tonumber (e [, base])", "prefix": "tonumber"}, "tostring": {"body": "tostring(${1:v})", "description": "tostring (v)", "prefix": "tostring"}, "type": {"body": "type(${1:v})", "description": "type (v)", "prefix": "type"}, "unpack": {"body": "unpack(${0:...})", "description": "unpack (list [, i [, j]])", "prefix": "unpack"}, "xpcall": {"body": "xpcall(${0:...})", "description": "xpcall (f, err)", "prefix": "xpcall"}, "wlan.getMode": {"body": "wlan.getMode(${1:dev})", "description": "\u83b7\u53d6wifi\u6a21\u5f0f", "prefix": "wlan.getMode"}, "wlan.setMode": {"body": "wlan.setMode(${1:dev},${2:mode})", "description": "\u8bbe\u7f6ewifi\u6a21\u5f0f,\u901a\u5e38\u4e0d\u9700\u8981\u8bbe\u7f6e", "prefix": "wlan.setMode"}, "wlan.connect": {"body": "wlan.connect(${1:ssid},${2:password})", "description": "\u8fde\u63a5wifi,\u6210\u529f\u542f\u52a8\u8054\u7f51\u7ebf\u7a0b\u4e0d\u7b49\u4e8e\u8054\u7f51\u6210\u529f!!", "prefix": "wlan.connect"}, "wlan.disconnect": {"body": "wlan.disconnect()", "description": "\u65ad\u5f00wifi", "prefix": "wlan.disconnect"}, "wlan.connected": {"body": "wlan.connected()", "description": "\u662f\u5426\u5df2\u7ecf\u8fde\u4e0awifi\u7f51\u7edc", "prefix": "wlan.connected"}, "wlan.autoreconnect": {"body": "wlan.autoreconnect(${1:enable})", "description": "\u8bbe\u7f6e\u6216\u67e5\u8be2wifi station\u662f\u5426\u81ea\u52a8\u8fde\u63a5", "prefix": "wlan.autoreconnect"}, "wlan.scan": {"body": "wlan.scan()", "description": "\u5f00\u59cb\u626b\u7f51,\u901a\u5e38\u914d\u5408wlan.scanResult\u4f7f\u7528", "prefix": "wlan.scan"}, "wlan.scanResult": {"body": "wlan.scanResult(${1:num})", "description": "\u83b7\u53d6\u626b\u7f51\u7ed3\u679c,\u9700\u8981\u5148\u6267\u884cwlan.scan,\u5e76\u7b49\u5f85WLAN_SCAN_DONE\u4e8b\u4ef6", "prefix": "wlan.scanResult"}, "wlan.get_mac_raw": {"body": "wlan.get_mac_raw()", "description": "\u83b7\u53d6mac\u5730\u5740,raw\u683c\u5f0f", "prefix": "wlan.get_mac_raw"}, "wlan.ready": {"body": "wlan.ready()", "description": "wifi\u662f\u5426\u5df2\u7ecf\u83b7\u53d6ip", "prefix": "wlan.ready"}, "wlan.oneShotStart": {"body": "wlan.oneShotStart(${1:mode},${2:ssid},${3:passwd})", "description": "\u542f\u52a8\u914d\u7f51\u8fc7\u7a0b,\u652f\u6301UDP/SOCKET/APWEB\u914d\u7f51", "prefix": "wlan.oneShotStart"}, "wlan.oneshotStop": {"body": "wlan.oneshotStop()", "description": "\u505c\u6b62\u914d\u7f51, \u901a\u5e38\u4e0d\u9700\u8981\u8c03\u7528", "prefix": "wlan.oneshotStop"}, "wlan.oneshotState": {"body": "wlan.oneshotState()", "description": "\u67e5\u8be2\u914d\u7f51\u72b6\u6001", "prefix": "wlan.oneshotState"}, "uart.setup": {"body": "uart.setup(${1:id},${2:baud_rate},${3:data_bits},${4:stop_bits},${5:partiy},${6:bit_order},${7:buff_size})", "description": "\u914d\u7f6e\u4e32\u53e3\u53c2\u6570", "prefix": "uart.setup"}, "uart.write": {"body": "uart.write(${1:id},${2:data})", "description": "\u5199\u4e32\u53e3", "prefix": "uart.write"}, "uart.read": {"body": "uart.read(${1:id},${2:len})", "description": "\u8bfb\u4e32\u53e3", "prefix": "uart.read"}, "uart.close": {"body": "uart.close(${1:id})", "description": "\u5173\u95ed\u4e32\u53e3", "prefix": "uart.close"}, "uart.on": {"body": "uart.on(${1:id},${2:event},${3:func})", "description": "\u6ce8\u518c\u4e32\u53e3\u4e8b\u4ef6\u56de\u8c03", "prefix": "uart.on"}, "socket.ntpSync": {"body": "socket.ntpSync(${1:server})", "description": "ntp\u65f6\u95f4\u540c\u6b65", "prefix": "socket.ntpSync"}, "socket.tsend": {"body": "socket.tsend(${1:host},${2:port},${3:data})", "description": "\u76f4\u63a5\u5411\u5730\u5740\u53d1\u9001\u4e00\u6bb5\u6570\u636e", "prefix": "socket.tsend"}, "socket.isReady": {"body": "socket.isReady()", "description": "\u7f51\u7edc\u662f\u5426\u5c31\u7eea", "prefix": "socket.isReady"}, "socket.ip": {"body": "socket.ip()", "description": "\u83b7\u53d6\u81ea\u8eabip,\u901a\u5e38\u662f\u5185\u7f51ip", "prefix": "socket.ip"}, "socket.tcp": {"body": "socket.tcp()", "description": "\u65b0\u5efa\u4e00\u4e2atcp socket", "prefix": "socket.tcp"}, "socket.udp": {"body": "socket.udp()", "description": "\u65b0\u5efa\u4e00\u4e2audp socket", "prefix": "socket.udp"}, "so:start": {"body": "so:start(${1:host},${2:port})", "description": "\u542f\u52a8socket\u7ebf\u7a0b", "prefix": "so:start"}, "so:close": {"body": "so:close()", "description": "\u5173\u95edsocket\u5bf9\u8c61", "prefix": "so:close"}, "so:send": {"body": "so:send(${1:data},${2:flags})", "description": "\u901a\u8fc7socket\u5bf9\u8c61\u53d1\u9001\u6570\u636e", "prefix": "so:send"}, "so:id": {"body": "so:id()", "description": "\u83b7\u53d6socket\u5bf9\u8c61\u7684id", "prefix": "so:id"}, "so:host": {"body": "so:host(${1:host})", "description": "\u8bbe\u7f6e\u670d\u52a1\u5668\u57df\u540d\u6216ip", "prefix": "so:host"}, "so:port": {"body": "so:port(${1:event},${2:func})", "description": "\u8bbe\u7f6esocket\u7684\u4e8b\u4ef6\u56de\u8c03", "prefix": "so:port"}, "so:clean": {"body": "so:clean(${1:0})", "description": "\u6e05\u7406socket\u5173\u8054\u7684\u8d44\u6e90,socket\u5bf9\u8c61\u5728\u5e9f\u5f03\u524d\u5fc5\u987b\u8c03\u7528", "prefix": "so:clean"}, "so:closed": {"body": "so:closed()", "description": "socket\u662f\u5426\u5df2\u7ecf\u65ad\u5f00?", "prefix": "so:closed"}, "so:rebind": {"body": "so:rebind(${1:socket_id})", "description": "\u4e3anetclient\u7ed1\u5b9asocket id, \u8be5\u64cd\u4f5c\u4ec5\u5728NBIOT\u6a21\u5757\u4e0b\u6709\u610f\u4e49.", "prefix": "so:rebind"}, "so:sockid": {"body": "so:sockid()", "description": "\u83b7\u53d6\u5e95\u5c42socket id", "prefix": "so:sockid"}, "sensor.ds18b20": {"body": "sensor.ds18b20(${1:pin})", "description": "\u83b7\u53d6DS18B20\u7684\u6e29\u5ea6\u6570\u636e", "prefix": "sensor.ds18b20"}, "sensor.w1_reset": {"body": "sensor.w1_reset(${1:pin})", "description": "\u5355\u603b\u7ebf\u534f\u8bae,\u8fde\u63a5\u8bbe\u5907", "prefix": "sensor.w1_reset"}, "sensor.w1_write": {"body": "sensor.w1_write(${1:pin},${2:data1},${3:data2})", "description": "\u5355\u603b\u7ebf\u534f\u8bae,\u5f80\u603b\u7ebf\u5199\u5165\u6570\u636e", "prefix": "sensor.w1_write"}, "sensor.w1_read": {"body": "sensor.w1_read(${1:pin},${2:len})", "description": "\u5355\u603b\u7ebf\u534f\u8bae,\u4ece\u603b\u7ebf\u8bfb\u53d6\u6570\u636e", "prefix": "sensor.w1_read"}, "http.req": {"body": "http.req(${1:url},${2:params},${3:cb})", "description": "\u53d1\u8d77\u4e00\u4e2ahttp\u8bf7\u6c42,\u63a8\u8350\u7528http.get/post/put/delete\u65b9\u6cd5", "prefix": "http.req"}, "http.get": {"body": "http.get(${1:url},${2:params},${3:cb})", "description": "\u53d1\u8d77\u4e00\u4e2ahttp get\u8bf7\u6c42", "prefix": "http.get"}, "http.post": {"body": "http.post(${1:url},${2:params},${3:cb})", "description": "\u53d1\u8d77\u4e00\u4e2ahttp post\u8bf7\u6c42", "prefix": "http.post"}, "http.put": {"body": "http.put(${1:url},${2:params},${3:cb})", "description": "\u53d1\u8d77\u4e00\u4e2ahttp put\u8bf7\u6c42", "prefix": "http.put"}, "http.delete": {"body": "http.delete(${1:url},${2:params},${3:cb})", "description": "\u53d1\u8d77\u4e00\u4e2ahttp delete\u8bf7\u6c42", "prefix": "http.delete"}, "crypto.md5": {"body": "crypto.md5(${1:str})", "description": "\u8ba1\u7b97md5\u503c", "prefix": "crypto.md5"}, "crypto.hmac_md5": {"body": "crypto.hmac_md5(${1:str},${2:key})", "description": "\u8ba1\u7b97hmac_md5\u503c", "prefix": "crypto.hmac_md5"}, "crypto.sha1": {"body": "crypto.sha1(${1:str})", "description": "\u8ba1\u7b97sha1\u503c", "prefix": "crypto.sha1"}, "crypto.hmac_sha1": {"body": "crypto.hmac_sha1(${1:str},${2:key})", "description": "\u8ba1\u7b97hmac_sha1\u503c", "prefix": "crypto.hmac_sha1"}, "crypto.cipher": {"body": "crypto.cipher(${1:type},${2:padding},${3:str},${4:key},${5:iv})", "description": "\u5bf9\u79f0\u89e3\u5bc6", "prefix": "crypto.cipher"}, "crypto.crc16": {"body": "crypto.crc16(${1:method},${2:data},${3:poly},${4:initial},${5:finally},${6:inReversemoutReverse})", "description": "\u8ba1\u7b97CRC16", "prefix": "crypto.crc16"}, "crypto.crc16_modbus": {"body": "crypto.crc16_modbus(${1:data})", "description": "\u76f4\u63a5\u8ba1\u7b97modbus\u7684crc16\u503c", "prefix": "crypto.crc16_modbus"}, "crypto.crc32": {"body": "crypto.crc32(${1:data})", "description": "\u8ba1\u7b97crc32\u503c", "prefix": "crypto.crc32"}, "crypto.crc8": {"body": "crypto.crc8(${1:data})", "description": "\u8ba1\u7b97crc8\u503c", "prefix": "crypto.crc8"}, "lpmem.read": {"body": "lpmem.read(${1:offset},${2:size})", "description": "\u8bfb\u53d6\u5185\u5b58\u5757", "prefix": "lpmem.read"}, "lpmem.write": {"body": "lpmem.write(${1:offset},${2:str})", "description": "\u5199\u5165\u5185\u5b58\u5757", "prefix": "lpmem.write"}, "lpmem.size": {"body": "lpmem.size()", "description": "\u83b7\u53d6\u5185\u5b58\u5757\u7684\u603b\u5927\u5c0f", "prefix": "lpmem.size"}, "log.setLevel": {"body": "log.setLevel(${1:level})", "description": "\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b", "prefix": "log.setLevel"}, "log.getLevel": {"body": "log.getLevel()", "description": "\u83b7\u53d6\u65e5\u5fd7\u7ea7\u522b", "prefix": "log.getLevel"}, "log.debug": {"body": "log.debug(${1:tag},${2:val},${3:val2},${4:val3},${5:...})", "description": "\u8f93\u51fa\u65e5\u5fd7,\u7ea7\u522bdebug", "prefix": "log.debug"}, "log.info": {"body": "log.info(${1:tag},${2:val},${3:val2},${4:val3},${5:...})", "description": "\u8f93\u51fa\u65e5\u5fd7,\u7ea7\u522binfo", "prefix": "log.info"}, "log.warn": {"body": "log.warn(${1:tag},${2:val},${3:val2},${4:val3},${5:...})", "description": "\u8f93\u51fa\u65e5\u5fd7,\u7ea7\u522bwarn", "prefix": "log.warn"}, "log.error": {"body": "log.error(${1:tag},${2:val},${3:val2},${4:val3},${5:...})", "description": "\u8f93\u51fa\u65e5\u5fd7,\u7ea7\u522berror", "prefix": "log.error"}, "eink.setup": {"body": "eink.setup(${1:full},${2:spiid})", "description": "\u521d\u59cb\u5316eink", "prefix": "eink.setup"}, "eink.clear": {"body": "eink.clear()", "description": "\u6e05\u9664\u7ed8\u56fe\u7f13\u51b2\u533a", "prefix": "eink.clear"}, "eink.setWin": {"body": "eink.setWin(${1:width},${2:height},${3:rotate})", "description": "\u8bbe\u7f6e\u7a97\u53e3", "prefix": "eink.setWin"}, "eink.getWin": {"body": "eink.getWin()", "description": "\u83b7\u53d6\u7a97\u53e3\u4fe1\u606f", "prefix": "eink.getWin"}, "eink.print": {"body": "eink.print(${1:x},${2:y},${3:str},${4:colored},${5:font})", "description": "\u7ed8\u5236\u5b57\u7b26\u4e32(\u4ec5ASCII)", "prefix": "eink.print"}, "eink.printcn": {"body": "eink.printcn(${1:x},${2:y},${3:str},${4:colored},${5:font})", "description": "\u7ed8\u5236\u5b57\u7b26\u4e32,\u652f\u6301\u4e2d\u6587", "prefix": "eink.printcn"}, "eink.show": {"body": "eink.show(${1:x},${2:y})", "description": "\u5c06\u7f13\u51b2\u533a\u56fe\u50cf\u8f93\u51fa\u5230\u5c4f\u5e55", "prefix": "eink.show"}, "eink.line": {"body": "eink.line(${1:x},${2:y},${3:x2},${4:y2},${5:colored})", "description": "\u7f13\u51b2\u533a\u7ed8\u5236\u7ebf", "prefix": "eink.line"}, "eink.rect": {"body": "eink.rect(${1:x},${2:y},${3:x2},${4:y2},${5:colored},${6:fill})", "description": "\u7f13\u51b2\u533a\u7ed8\u5236\u77e9\u5f62", "prefix": "eink.rect"}, "eink.circle": {"body": "eink.circle(${1:x},${2:y},${3:radius},${4:colored},${5:fill})", "description": "\u7f13\u51b2\u533a\u7ed8\u5236\u5706\u5f62", "prefix": "eink.circle"}, "eink.qrcode": {"body": "eink.qrcode(${1:x},${2:y},${3:str},${4:version})", "description": "\u7f13\u51b2\u533a\u7ed8\u5236QRCode", "prefix": "eink.qrcode"}, "eink.bat": {"body": "eink.bat(${1:x},${2:y},${3:bat})", "description": "\u7f13\u51b2\u533a\u7ed8\u5236\u7535\u6c60", "prefix": "eink.bat"}, "eink.weather_icon": {"body": "eink.weather_icon(${1:x},${2:y},${3:code})", "description": "\u7f13\u51b2\u533a\u7ed8\u5236\u5929\u6c14\u56fe\u6807", "prefix": "eink.weather_icon"}, "eink.model": {"body": "eink.model(${1:m})", "description": "\u8bbe\u7f6e\u58a8\u6c34\u5c4f\u9a71\u52a8\u578b\u53f7", "prefix": "eink.model"}, "disp.init": {"body": "disp.init(${1:conf})", "description": "\u663e\u793a\u5c4f\u521d\u59cb\u5316", "prefix": "disp.init"}, "disp.close": {"body": "disp.close()", "description": "\u5173\u95ed\u663e\u793a\u5c4f", "prefix": "disp.close"}, "disp.update": {"body": "disp.update()", "description": "\u628a\u663e\u793a\u6570\u636e\u66f4\u65b0\u5230\u5c4f\u5e55", "prefix": "disp.update"}, "disp.drawStr": {"body": "disp.drawStr(${1:content},${2:x},${3:y})", "description": "\u5728\u663e\u793a\u5c4f\u4e0a\u753b\u4e00\u6bb5\u6587\u5b57,\u8981\u8c03\u7528disp.update\u624d\u4f1a\u66f4\u65b0\u5230\u5c4f\u5e55", "prefix": "disp.drawStr"}, "disp.setFont": {"body": "disp.setFont(${1:fontId})", "description": "\u8bbe\u7f6e\u5b57\u4f53", "prefix": "disp.setFont"}, "libgnss.parse": {"body": "libgnss.parse(${1:str})", "description": "\u5904\u7406nmea\u6570\u636e", "prefix": "libgnss.parse"}, "libgnss.isFix": {"body": "libgnss.isFix()", "description": "\u5f53\u524d\u662f\u5426\u5df2\u7ecf\u5b9a\u4f4d\u6210\u529f", "prefix": "libgnss.isFix"}, "libgnss.getIntLocation": {"body": "libgnss.getIntLocation()", "description": "\u83b7\u53d6\u4f4d\u7f6e\u4fe1\u606f", "prefix": "libgnss.getIntLocation"}, "libgnss.getRmc": {"body": "libgnss.getRmc()", "description": "\u83b7\u53d6\u539f\u59cbRMC\u4f4d\u7f6e\u4fe1\u606f", "prefix": "libgnss.getRmc"}, "libgnss.getGsv": {"body": "libgnss.getGsv()", "description": "\u83b7\u53d6\u539f\u59cbGSV\u4fe1\u606f", "prefix": "libgnss.getGsv"}, "libgnss.getGsa": {"body": "libgnss.getGsa()", "description": "\u83b7\u53d6\u539f\u59cbGSA\u4fe1\u606f", "prefix": "libgnss.getGsa"}, "libgnss.getVtg": {"body": "libgnss.getVtg()", "description": "\u83b7\u53d6\u539f\u59cbVTA\u4f4d\u7f6e\u4fe1\u606f", "prefix": "libgnss.getVtg"}, "i2c.exist": {"body": "i2c.exist(${1:id})", "description": "i2c\u7f16\u53f7\u662f\u5426\u5b58\u5728", "prefix": "i2c.exist"}, "i2c.setup": {"body": "i2c.setup(${1:id})", "description": "i2c\u521d\u59cb\u5316", "prefix": "i2c.setup"}, "i2c.send": {"body": "i2c.send(${1:id},${2:addr},${3:data})", "description": "i2c\u53d1\u9001\u6570\u636e", "prefix": "i2c.send"}, "i2c.recv": {"body": "i2c.recv(${1:id},${2:addr},${3:len})", "description": "i2c\u63a5\u6536\u6570\u636e", "prefix": "i2c.recv"}, "i2c.writeReg": {"body": "i2c.writeReg(${1:id},${2:addr},${3:reg},${4:data})", "description": "i2c\u5199\u5bc4\u5b58\u5668\u6570\u636e", "prefix": "i2c.writeReg"}, "i2c.readReg": {"body": "i2c.readReg(${1:id},${2:addr},${3:reg},${4:len})", "description": "i2c\u8bfb\u5bc4\u5b58\u5668\u6570\u636e", "prefix": "i2c.readReg"}, "i2c.close": {"body": "i2c.close(${1:id})", "description": "\u5173\u95edi2c\u8bbe\u5907", "prefix": "i2c.close"}, "i2c.readDHT12": {"body": "i2c.readDHT12(${1:id})", "description": "\u4ecei2c\u603b\u7ebf\u8bfb\u53d6DHT12\u7684\u6e29\u6e7f\u5ea6\u6570\u636e", "prefix": "i2c.readDHT12"}, "i2c.readSHT30": {"body": "i2c.readSHT30(${1:id},${2:addr})", "description": "\u4ecei2c\u603b\u7ebf\u8bfb\u53d6DHT30\u7684\u6e29\u6e7f\u5ea6\u6570\u636e(\u7531\"\u597d\u5947\u661f\"\u8d21\u732e)", "prefix": "i2c.readSHT30"}, "spi.setup": {"body": "spi.setup(${1:id},${2:cs},${3:CPHA},${4:CPOL},${5:dataw},${6:bandrate},${7:bitdict},${8:ms},${9:mode})", "description": "\u8bbe\u7f6e\u5e76\u542f\u7528SPI", "prefix": "spi.setup"}, "spi.close": {"body": "spi.close(${1:id})", "description": "\u5173\u95ed\u6307\u5b9a\u7684SPI", "prefix": "spi.close"}, "spi.transfer": {"body": "spi.transfer(${1:id},${2:send_data})", "description": "\u4f20\u8f93SPI\u6570\u636e", "prefix": "spi.transfer"}, "spi.recv": {"body": "spi.recv(${1:id},${2:size})", "description": "\u63a5\u6536\u6307\u5b9a\u957f\u5ea6\u7684SPI\u6570\u636e", "prefix": "spi.recv"}, "spi.send": {"body": "spi.send(${1:id},${2:data})", "description": "\u53d1\u9001SPI\u6570\u636e", "prefix": "spi.send"}, "adc.open": {"body": "adc.open(${1:id})", "description": "\u6253\u5f00adc\u901a\u9053", "prefix": "adc.open"}, "adc.read": {"body": "adc.read(${1:id})", "description": "\u8bfb\u53d6adc\u901a\u9053", "prefix": "adc.read"}, "adc.close": {"body": "adc.close(${1:id})", "description": "\u5173\u95edadc\u901a\u9053", "prefix": "adc.close"}, "gpio.setup": {"body": "gpio.setup(${1:pin},${2:mode},${3:pull})", "description": "\u8bbe\u7f6e\u7ba1\u811a\u529f\u80fd", "prefix": "gpio.setup"}, "gpio.set": {"body": "gpio.set(${1:pin},${2:value})", "description": "\u8bbe\u7f6e\u7ba1\u811a\u7535\u5e73", "prefix": "gpio.set"}, "gpio.get": {"body": "gpio.get(${1:pin})", "description": "\u83b7\u53d6\u7ba1\u811a\u7535\u5e73", "prefix": "gpio.get"}, "gpio.close": {"body": "gpio.close(${1:pin})", "description": "\u5173\u95ed\u7ba1\u811a\u529f\u80fd(\u9ad8\u963b\u8f93\u5165\u6001),\u5173\u6389\u4e2d\u65ad", "prefix": "gpio.close"}, "gpio.setDefaultPull": {"body": "gpio.setDefaultPull(${1:val})", "description": "\u8bbe\u7f6eGPIO\u811a\u7684\u9ed8\u8ba4\u4e0a\u62c9/\u4e0b\u62c9\u8bbe\u7f6e, \u9ed8\u8ba4\u662f\u5e73\u53f0\u81ea\u5b9a\u4e49(\u4e00\u822c\u4e3a\u5f00\u6f0f).", "prefix": "gpio.setDefaultPull"}, "rtos.receive": {"body": "rtos.receive(${1:timeout})", "description": "\u63a5\u53d7\u5e76\u5904\u7406\u5e95\u5c42\u6d88\u606f\u961f\u5217.", "prefix": "rtos.receive"}, "rtos.timer_start": {"body": "rtos.timer_start(${1:id},${2:timeout},${3:_repeat})", "description": "\u542f\u52a8\u4e00\u4e2a\u5b9a\u65f6\u5668", "prefix": "rtos.timer_start"}, "rtos.timer_stop": {"body": "rtos.timer_stop(${1:id})", "description": "\u5173\u95ed\u5e76\u91ca\u653e\u4e00\u4e2a\u5b9a\u65f6\u5668", "prefix": "rtos.timer_stop"}, "rtos.reboot": {"body": "rtos.reboot()", "description": "\u8bbe\u5907\u91cd\u542f", "prefix": "rtos.reboot"}, "rtos.buildDate": {"body": "rtos.buildDate()", "description": "\u83b7\u53d6\u56fa\u4ef6\u7f16\u8bd1\u65e5\u671f", "prefix": "rtos.buildDate"}, "rtos.bsp": {"body": "rtos.bsp()", "description": "\u83b7\u53d6\u786c\u4ef6bsp\u578b\u53f7", "prefix": "rtos.bsp"}, "rtos.version": {"body": "rtos.version()", "description": "\u83b7\u53d6\u56fa\u4ef6\u7248\u672c\u53f7", "prefix": "rtos.version"}, "rtos.standy": {"body": "rtos.standy(${1:timeout})", "description": "\u8fdb\u5165\u5f85\u673a\u6a21\u5f0f(\u90e8\u5206\u8bbe\u5907\u53ef\u7528,\u4f8b\u5982w60x)", "prefix": "rtos.standy"}, "rtos.meminfo": {"body": "rtos.meminfo(${1:type})", "description": "\u83b7\u53d6\u5185\u5b58\u4fe1\u606f", "prefix": "rtos.meminfo"}, "rtos.firmware": {"body": "rtos.firmware()", "description": "\u8fd4\u56de\u5e95\u5c42\u63cf\u8ff0\u4fe1\u606f,\u683c\u5f0f\u4e3a LuatOS_$VERSION_$BSP,\u53ef\u7528\u4e8eOTA\u5347\u7ea7\u5224\u65ad\u5e95\u5c42\u4fe1\u606f", "prefix": "rtos.firmware"}, "timer.mdelay": {"body": "timer.mdelay(${1:timeout})", "description": "\u786c\u963b\u585e\u6307\u5b9a\u65f6\u957f,\u671f\u95f4\u6ca1\u6709\u4efb\u4f55luat\u4ee3\u7801\u4f1a\u6267\u884c,\u5305\u62ec\u5e95\u5c42\u6d88\u606f\u5904\u7406\u673a\u5236", "prefix": "timer.mdelay"}, "u8g2.begin": {"body": "u8g2.begin(${1:\"ssd1306\"})", "description": "u8g2\u663e\u793a\u5c4f\u521d\u59cb\u5316", "prefix": "u8g2.begin"}, "u8g2.close": {"body": "u8g2.close()", "description": "\u5173\u95ed\u663e\u793a\u5c4f", "prefix": "u8g2.close"}, "u8g2.ClearBuffer": {"body": "u8g2.ClearBuffer()\u6e05\u9664\u5185\u5b58\u5e27\u7f13\u51b2\u533a\u4e2d\u7684\u6240\u6709\u50cf\u7d20\u3002", "description": "\u6e05\u5c4f", "prefix": "u8g2.ClearBuffer"}, "u8g2.SendBuffer": {"body": "u8g2.SendBuffer()\u5c06\u5b58\u50a8\u5668\u5e27\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u53d1\u9001\u5230\u663e\u793a\u5668\u3002", "description": "\u5c06\u6570\u636e\u66f4\u65b0\u5230\u5c4f\u5e55", "prefix": "u8g2.SendBuffer"}, "u8g2.DrawUTF8": {"body": "u8g2.DrawUTF8(${1:str},${2:x},${3:y)\u5728\u663e\u793a\u5c4f\u4e0a\u753b\u4e00\u6bb5\u6587\u5b57},${4:\u8981\u8c03\u7528u8g2.SendBuffer(})", "description": "\u5728\u663e\u793a\u5c4f\u4e0a\u753b\u4e00\u6bb5\u6587\u5b57", "prefix": "u8g2.DrawUTF8"}, "u8g2.SetFontMode": {"body": "u8g2.SetFontMode(${1:mode})", "description": "\u8bbe\u7f6e\u5b57\u4f53\u6a21\u5f0f", "prefix": "u8g2.SetFontMode"}, "u8g2.SetFont": {"body": "u8g2.SetFont(${1:font})", "description": "\u8bbe\u7f6e\u5b57\u4f53", "prefix": "u8g2.SetFont"}, "u8g2.GetDisplayHeight": {"body": "u8g2.GetDisplayHeight()", "description": "\u83b7\u53d6\u663e\u793a\u5c4f\u9ad8\u5ea6", "prefix": "u8g2.GetDisplayHeight"}, "u8g2.GetDisplayWidth": {"body": "u8g2.GetDisplayWidth()", "description": "\u83b7\u53d6\u663e\u793a\u5c4f\u5bbd\u5ea6", "prefix": "u8g2.GetDisplayWidth"}, "u8g2.DrawLine": {"body": "u8g2.DrawLine(${1:x0},${2:y0},${3:x1},${4:y1})", "description": "\u5728\u4e24\u70b9\u4e4b\u95f4\u753b\u4e00\u6761\u7ebf.", "prefix": "u8g2.DrawLine"}, "u8g2.DrawCircle": {"body": "u8g2.DrawCircle(${1:x0},${2:y0},${3:rad},${4:opt})", "description": "\u5728x,y\u4f4d\u7f6e\u753b\u4e00\u4e2a\u534a\u5f84\u4e3arad\u7684\u7a7a\u5fc3\u5706.", "prefix": "u8g2.DrawCircle"}, "u8g2.DrawDisc": {"body": "u8g2.DrawDisc(${1:x0},${2:y0},${3:rad},${4:opt})", "description": "\u5728x,y\u4f4d\u7f6e\u753b\u4e00\u4e2a\u534a\u5f84\u4e3arad\u7684\u5b9e\u5fc3\u5706.", "prefix": "u8g2.DrawDisc"}, "u8g2.DrawEllipse": {"body": "u8g2.DrawEllipse(${1:x0},${2:y0},${3:rx},${4:ry},${5:opt})", "description": "\u5728x,y\u4f4d\u7f6e\u753b\u4e00\u4e2a\u534a\u5f84\u4e3arad\u7684\u7a7a\u5fc3\u692d\u5706.", "prefix": "u8g2.DrawEllipse"}, "u8g2.DrawFilledEllipse": {"body": "u8g2.DrawFilledEllipse(${1:x0},${2:y0},${3:rx},${4:ry},${5:opt})", "description": "\u5728x,y\u4f4d\u7f6e\u753b\u4e00\u4e2a\u534a\u5f84\u4e3arad\u7684\u5b9e\u5fc3\u692d\u5706.", "prefix": "u8g2.DrawFilledEllipse"}, "u8g2.DrawBox": {"body": "u8g2.DrawBox(${1:x},${2:y},${3:w},${4:h})", "description": "\u4ecex / y\u4f4d\u7f6e\uff08\u5de6\u4e0a\u8fb9\u7f18\uff09\u5f00\u59cb\u7ed8\u5236\u4e00\u4e2a\u6846\uff08\u586b\u5145\u7684\u6846\uff09.", "prefix": "u8g2.DrawBox"}, "u8g2.DrawFrame": {"body": "u8g2.DrawFrame(${1:x},${2:y},${3:w},${4:h})", "description": "\u4ecex / y\u4f4d\u7f6e\uff08\u5de6\u4e0a\u8fb9\u7f18\uff09\u5f00\u59cb\u7ed8\u5236\u4e00\u4e2a\u6846\uff08\u7a7a\u6846\uff09.", "prefix": "u8g2.DrawFrame"}, "u8g2.DrawRBox": {"body": "u8g2.DrawRBox(${1:x},${2:y},${3:w},${4:h},${5:r})", "description": "\u7ed8\u5236\u4e00\u4e2a\u4ecex / y\u4f4d\u7f6e\uff08\u5de6\u4e0a\u8fb9\u7f18\uff09\u5f00\u59cb\u5177\u6709\u5706\u5f62\u8fb9\u7f18\u7684\u586b\u5145\u6846/\u6846\u67b6.", "prefix": "u8g2.DrawRBox"}, "u8g2.DrawRFrame": {"body": "u8g2.DrawRFrame(${1:x},${2:y},${3:w},${4:h},${5:r})", "description": "\u7ed8\u5236\u4e00\u4e2a\u4ecex / y\u4f4d\u7f6e\uff08\u5de6\u4e0a\u8fb9\u7f18\uff09\u5f00\u59cb\u5177\u6709\u5706\u5f62\u8fb9\u7f18\u7684\u7a7a\u6846/\u6846\u67b6.", "prefix": "u8g2.DrawRFrame"}, "u8g2.DrawGlyph": {"body": "u8g2.DrawGlyph(${1:x},${2:y},${3:encoding})", "description": "\u7ed8\u5236\u4e00\u4e2a\u56fe\u5f62\u5b57\u7b26\u3002\u5b57\u7b26\u653e\u7f6e\u5728\u6307\u5b9a\u7684\u50cf\u7d20\u4f4d\u7f6ex\u548cy.", "prefix": "u8g2.DrawGlyph"}, "u8g2.DrawTriangle": {"body": "u8g2.DrawTriangle(${1:x0},${2:y0},${3:x1},${4:y1},${5:x2},${6:y2})", "description": "\u7ed8\u5236\u4e00\u4e2a\u4e09\u89d2\u5f62\uff08\u5b9e\u5fc3\u591a\u8fb9\u5f62\uff09.", "prefix": "u8g2.DrawTriangle"}, "u8g2.SetBitmapMode": {"body": "u8g2.SetBitmapMode(${1:mode})", "description": "\u5b9a\u4e49\u4f4d\u56fe\u51fd\u6570\u662f\u5426\u5c06\u5199\u5165\u80cc\u666f\u8272", "prefix": "u8g2.SetBitmapMode"}, "pwm.open": {"body": "pwm.open(${1:channel},${2:period},${3:pulse})", "description": "\u5f00\u542f\u6307\u5b9a\u7684PWM\u901a\u9053", "prefix": "pwm.open"}, "pwm.close": {"body": "pwm.close(${1:channel})", "description": "\u5173\u95ed\u6307\u5b9a\u7684PWM\u901a\u9053", "prefix": "pwm.close"}, "ctiot.init": {"body": "ctiot.init()", "description": "* \u521d\u59cb\u5316ctiot\uff0c\u5728\u590d\u4f4d\u5f00\u673a\u540e\u4f7f\u7528\u4e00\u6b21", "prefix": "ctiot.init"}, "ctiot.param": {"body": "ctiot.param(${1:ip},${2:port},${3:lifetime})", "description": "* \u8bbe\u7f6e\u548c\u8bfb\u53d6ctiot\u76f8\u5173\u53c2\u6570\uff0c\u6709\u53c2\u6570\u8f93\u5165\u5219\u8bbe\u7f6e\uff0c\u65e0\u8bba\u662f\u5426\u6709\u53c2\u6570\u8f93\u5165\uff0c\u5747\u8f93\u51fa\u5f53\u524d\u53c2\u6570", "prefix": "ctiot.param"}, "ctiot.ep": {"body": "ctiot.ep(${1:val})", "description": "* \u8bbe\u7f6e\u548c\u8bfb\u53d6\u81ea\u5b9a\u4e49EP", "prefix": "ctiot.ep"}, "ctiot.connect": {"body": "ctiot.connect()", "description": "* \u8fde\u63a5CTIOT\uff0c\u5fc5\u987b\u5728\u8bbe\u7f6e\u5b8c\u53c2\u6570\u548c\u6a21\u5f0f\u540e\u518d\u4f7f\u7528", "prefix": "ctiot.connect"}, "ctiot.disconnect": {"body": "ctiot.disconnect()", "description": "* \u65ad\u5f00ctiot", "prefix": "ctiot.disconnect"}, "ctiot.write": {"body": "ctiot.write(${1:data},${2:mode},${3:seq})", "description": "* \u53d1\u9001\u6570\u636e\u7ed9ctiot", "prefix": "ctiot.write"}, "ctiot.ready": {"body": "ctiot.ready()", "description": "* \u662f\u5426\u5df2\u7ecf\u5c31\u7eea", "prefix": "ctiot.ready"}, "pm.request": {"body": "pm.request(${1:mode})", "description": "\u8bf7\u6c42\u8fdb\u5165\u6307\u5b9a\u7684\u4f11\u7720\u6a21\u5f0f", "prefix": "pm.request"}, "pm.dtimerStart": {"body": "pm.dtimerStart(${1:id},${2:timeout})", "description": "\u542f\u52a8\u5e95\u5c42\u5b9a\u65f6\u5668,\u5728\u4f11\u7720\u6a21\u5f0f\u4e0b\u4f9d\u7136\u751f\u6548. \u53ea\u89e6\u53d1\u4e00\u6b21", "prefix": "pm.dtimerStart"}, "pm.dtimerStop": {"body": "pm.dtimerStop(${1:id})", "description": "\u5173\u95ed\u5e95\u5c42\u5b9a\u65f6\u5668", "prefix": "pm.dtimerStop"}, "pm.dtimerCheck": {"body": "pm.dtimerCheck(${1:id})", "description": "\u68c0\u67e5\u5e95\u5c42\u5b9a\u65f6\u5668\u662f\u4e0d\u662f\u5728\u8fd0\u884c", "prefix": "pm.dtimerCheck"}, "pm.lastReson": {"body": "pm.lastReson()", "description": "\u5f00\u673a\u539f\u56e0,\u7528\u4e8e\u5224\u65ad\u662f\u4ece\u4f11\u7720\u6a21\u5757\u5f00\u673a,\u8fd8\u662f\u7535\u6e90/\u590d\u4f4d\u5f00\u673a", "prefix": "pm.lastReson"}, "pm.force": {"body": "pm.force(${1:mode})", "description": "\u5f3a\u5236\u8fdb\u5165\u6307\u5b9a\u7684\u4f11\u7720\u6a21\u5f0f", "prefix": "pm.force"}, "pm.check": {"body": "pm.check()", "description": "\u68c0\u67e5\u4f11\u7720\u72b6\u6001", "prefix": "pm.check"}, "libcoap.new": {"body": "libcoap.new(${1:code},${2:uri},${3:headers},${4:payload})", "description": "\u521b\u5efa\u4e00\u4e2acoap\u6570\u636e\u5305", "prefix": "libcoap.new"}, "libcoap.parse": {"body": "libcoap.parse(${1:str})", "description": "\u89e3\u6790coap\u6570\u636e\u5305", "prefix": "libcoap.parse"}, "coapdata:msgid": {"body": "coapdata:msgid()", "description": "\u83b7\u53d6coap\u6570\u636e\u5305\u7684msgid", "prefix": "coapdata:msgid"}, "coapdata:token": {"body": "coapdata:token()", "description": "\u83b7\u53d6coap\u6570\u636e\u5305\u7684token", "prefix": "coapdata:token"}, "coapdata:rawdata": {"body": "coapdata:rawdata()", "description": "\u83b7\u53d6coap\u6570\u636e\u5305\u7684\u4e8c\u8fdb\u5236\u6570\u636e,\u7528\u4e8e\u53d1\u9001\u5230\u670d\u52a1\u5668", "prefix": "coapdata:rawdata"}, "coapdata:code": {"body": "coapdata:code()", "description": "\u83b7\u53d6coap\u6570\u636e\u5305\u7684code", "prefix": "coapdata:code"}, "coapdata:hcode": {"body": "coapdata:hcode()", "description": "\u83b7\u53d6coap\u6570\u636e\u5305\u7684http code, \u6bd4coap\u539f\u59cb\u7684code\u8981\u53cb\u597d", "prefix": "coapdata:hcode"}, "coapdata:type": {"body": "coapdata:type(${1:t})", "description": "\u83b7\u53d6coap\u6570\u636e\u5305\u7684type, \u4f8b\u5982libcoap.CON/NON/ACK/RST", "prefix": "coapdata:type"}, "coapdata:data": {"body": "coapdata:data()", "description": "\u83b7\u53d6coap\u6570\u636e\u5305\u7684data", "prefix": "coapdata:data"}}