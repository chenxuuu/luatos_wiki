libcoap
=======

coap数据处理

libcoap.new(code, uri, headers, payload)
----------------------------------------

创建一个coap数据包

参数
~~~~

+------------+--------------------------------------------------------+
| 传入值类型 | 解释                                                   |
+============+========================================================+
| int        | coap的code,                                            |
|            | 例                                                     |
|            | 如libcoap.GET/libcoap.POST/libcoap.PUT/libcoap.DELETE  |
+------------+--------------------------------------------------------+
| string     | 目标URI,必须填写, 不需要加上/开头                      |
+------------+--------------------------------------------------------+
| table      | 请求头,类似于http的headers,可选                        |
+------------+--------------------------------------------------------+
| string     | 请求体,类似于http的body,可选                           |
+------------+--------------------------------------------------------+

返回值
~~~~~~

+------------+--------------------------------------------------------+
| 返回值类型 | 解释                                                   |
+============+========================================================+
| int        | coap的code,                                            |
|            | 例                                                     |
|            | 如libcoap.GET/libcoap.POST/libcoap.PUT/libcoap.DELETE  |
+------------+--------------------------------------------------------+
| string     | 目标URI,必须填写, 不需要加上/开头                      |
+------------+--------------------------------------------------------+
| table      | 请求头,类似于http的headers,可选                        |
+------------+--------------------------------------------------------+
| string     | 请求体,类似于http的body,可选                           |
+------------+--------------------------------------------------------+

.. _返回值-1:

返回值
~~~~~~

.. code:: lua

   -- 创建一个请求服务器time的数据包
   local coapdata = libcoap.new(libcoap.GET, "time")
   local data = coapdata:rawdata()

--------------

libcoap.parse(str)
------------------

解析coap数据包

.. _参数-1:

参数
~~~~

========== ==========
传入值类型 解释
========== ==========
string     coap数据包
========== ==========

.. _返回值-2:

返回值
~~~~~~

========== ==========
返回值类型 解释
========== ==========
string     coap数据包
========== ==========

.. _返回值-3:

返回值
~~~~~~

.. code:: lua

   -- 解析服务器传入的数据包
   local coapdata = libcoap.parse(indata)
   log.info("coapdata", coapdata:hcode(), coapdata:data())

--------------

coapdata:msgid()
----------------

获取coap数据包的msgid

.. _参数-2:

参数
~~~~

无

.. _返回值-4:

返回值
~~~~~~

========== ====
返回值类型 解释
========== ====
========== ====

.. _返回值-5:

返回值
~~~~~~

.. code:: lua

   -- 解析服务器传入的数据包
   local coapdata = libcoap.parse(indata)
   log.info("coapdata", coapdata:msgid())

--------------

coapdata:token()
----------------

获取coap数据包的token

.. _参数-3:

参数
~~~~

无

.. _返回值-6:

返回值
~~~~~~

========== ====
返回值类型 解释
========== ====
========== ====

.. _返回值-7:

返回值
~~~~~~

.. code:: lua

   -- 解析服务器传入的数据包
   local coapdata = libcoap.parse(indata)
   log.info("coapdata", coapdata:token())

--------------

coapdata:rawdata()
------------------

获取coap数据包的二进制数据,用于发送到服务器

.. _参数-4:

参数
~~~~

无

.. _返回值-8:

返回值
~~~~~~

========== ====
返回值类型 解释
========== ====
========== ====

.. _返回值-9:

返回值
~~~~~~

.. code:: lua

   -- 解析服务器传入的数据包
   local coapdata = libcoap.new(libcoap.GET, "time")
   netc:send(coapdata:rawdata())

--------------

coapdata:code()
---------------

获取coap数据包的code

.. _参数-5:

参数
~~~~

无

.. _返回值-10:

返回值
~~~~~~

========== ====
返回值类型 解释
========== ====
========== ====

.. _返回值-11:

返回值
~~~~~~

.. code:: lua

   -- 解析服务器传入的数据包
   local coapdata = libcoap.parse(indata)
   log.info("coapdata", coapdata:code())

--------------

coapdata:hcode()
----------------

获取coap数据包的http code, 比coap原始的code要友好

.. _参数-6:

参数
~~~~

无

.. _返回值-12:

返回值
~~~~~~

========== ====
返回值类型 解释
========== ====
========== ====

.. _返回值-13:

返回值
~~~~~~

.. code:: lua

   -- 解析服务器传入的数据包
   local coapdata = libcoap.parse(indata)
   log.info("coapdata", coapdata:hcode())

--------------

coapdata:type(t)
----------------

获取coap数据包的type, 例如libcoap.CON/NON/ACK/RST

.. _参数-7:

参数
~~~~

========== ===============
传入值类型 解释
========== ===============
int        新的type值,可选
========== ===============

.. _返回值-14:

返回值
~~~~~~

========== ===============
返回值类型 解释
========== ===============
int        新的type值,可选
========== ===============

.. _返回值-15:

返回值
~~~~~~

.. code:: lua

   -- 解析服务器传入的数据包
   local coapdata = libcoap.parse(indata)
   log.info("coapdata", coapdata:type())

--------------

coapdata:data()
---------------

获取coap数据包的data

.. _参数-8:

参数
~~~~

无

.. _返回值-16:

返回值
~~~~~~

========== ====
返回值类型 解释
========== ====
========== ====

.. _返回值-17:

返回值
~~~~~~

.. code:: lua

   -- 解析服务器传入的数据包
   local coapdata = libcoap.parse(indata)
   log.info("coapdata", coapdata:data())

--------------
